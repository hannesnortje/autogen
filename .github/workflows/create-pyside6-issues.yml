name: Create Issues from PYSIDE6_UI_IMPLEMENTATION.md

on:
  workflow_dispatch:
    inputs:
      start_number:
        description: "Next ticket number (e.g. 169)"
        required: true
        default: "169"
      md_path:
        description: "Markdown file path"
        required: true
        default: "PYSIDE6_UI_IMPLEMENTATION.md"
      blob_ref:
        description: "Branch or tag for blob links"
        required: true
        default: "main"
      label:
        description: "Label to tag created issues"
        required: true
        default: "auto:pyside6"

permissions:
  contents: read
  issues: write

jobs:
  create-issues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Create issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          START_NUMBER: ${{ inputs.start_number }}
          MD_PATH: ${{ inputs.md_path }}
          BLOB_REF: ${{ inputs.blob_ref }}
          LABEL_NAME: ${{ inputs.label }}
        run: |
          python - << 'PY'
          import os, re, json, urllib.request, urllib.parse, sys, time, html

          REPO = os.environ["REPO"]
          OWNER, NAME = REPO.split("/")
          TOKEN = os.environ["GH_TOKEN"]
          START_NUMBER = int(os.environ["START_NUMBER"])
          MD_PATH = os.environ["MD_PATH"]
          BLOB_REF = os.environ["BLOB_REF"]
          LABEL_NAME = os.environ["LABEL_NAME"]

          # Read markdown
          with open(MD_PATH, "r", encoding="utf-8") as f:
            md = f.read()

          # Extract steps: headings + unchecked checkboxes
          step_lines = []
          for line in md.splitlines():
            if re.match(r'^\s{0,3}#{1,6}\s+\S', line):
              step_lines.append(line.strip())
            elif re.match(r'^\s*-\s*\[\s*\]\s+\S', line):
              step_lines.append(line.strip())

          def slugify_for_github(h):
            h = re.sub(r'^\s*#{1,6}\s*', '', h)
            h = re.sub(r'^\s*-\s*\[\s*\]\s*', '', h)
            text = h
            text = re.sub(r'[`*_~]', '', text)
            text = text.lower().strip()
            text = re.sub(r'[^\w\s-]', '', text)
            text = re.sub(r'\s+', '-', text)
            return text

          # Ensure label exists
          def api(method, path, data=None):
            url = f"https://api.github.com{path}"
            req = urllib.request.Request(url, method=method)
            req.add_header("Authorization", f"Bearer {TOKEN}")
            req.add_header("Accept", "application/vnd.github+json")
            if data is not None:
              body = json.dumps(data).encode("utf-8")
              req.add_header("Content-Type", "application/json")
            else:
              body = None
            with urllib.request.urlopen(req, body) as r:
              return json.loads(r.read().decode("utf-8")) if r.length else {}

          # Create label if missing
          try:
            api("GET", f"/repos/{OWNER}/{NAME}/labels/{urllib.parse.quote(LABEL_NAME, safe='')}")
          except Exception:
            api("POST", f"/repos/{OWNER}/{NAME}/labels", {
              "name": LABEL_NAME,
              "color": "0e8a16",  # green-ish
              "description": "Auto-generated from PYSIDE6_UI_IMPLEMENTATION.md"
            })

          # Fetch existing issue titles with this label (to avoid duplicates)
          existing_titles = set()
          page = 1
          while True:
            q = f"/repos/{OWNER}/{NAME}/issues?state=all&labels={urllib.parse.quote(LABEL_NAME)}&per_page=100&page={page}"
            items = api("GET", q)
            if not items:
              break
            for it in items:
              if "pull_request" not in it:  # exclude PRs
                existing_titles.add(it["title"])
            page += 1

          base_url = f"https://github.com/{OWNER}/{NAME}/blob/{BLOB_REF}/{MD_PATH}"
          anchors_seen = {}
          n = START_NUMBER
          created = 0
          for raw in step_lines:
            title_text = re.sub(r'^\s*(?:#{1,6}\s*|-\s*\[\s*\]\s*)', '', raw).strip()
            base_slug = slugify_for_github(raw)
            slug = base_slug
            i = 1
            while slug in anchors_seen:
              i += 1
              slug = f"{base_slug}-{i}"
            anchors_seen[slug] = True

            url = f"{base_url}#{urllib.parse.quote(slug)}"
            issue_title = f"[#{n}] {title_text}"
            issue_body = f"{url}\n\n_This issue was auto-generated from **{MD_PATH}**._"

            if issue_title in existing_titles:
              n += 1
              continue  # already created in a previous run

            # Create the issue
            data = {
              "title": issue_title[:256],
              "body": issue_body,
              "labels": [LABEL_NAME]
            }
            api("POST", f"/repos/{OWNER}/{NAME}/issues", data)
            created += 1
            n += 1
            time.sleep(0.3)  # be gentle on API

          print(f"Created {created} issues with label '{LABEL_NAME}'.")
          PY
